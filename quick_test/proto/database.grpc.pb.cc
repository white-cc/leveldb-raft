// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: database.proto

#include "database.pb.h"
#include "database.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace database {

static const char* Database_method_names[] = {
  "/database.Database/Put",
  "/database.Database/Get",
  "/database.Database/Delete",
};

std::unique_ptr< Database::Stub> Database::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Database::Stub> stub(new Database::Stub(channel, options));
  return stub;
}

Database::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Put_(Database_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(Database_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(Database_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Database::Stub::Put(::grpc::ClientContext* context, const ::database::Data& request, ::database::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::database::Data, ::database::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Put_, context, request, response);
}

void Database::Stub::async::Put(::grpc::ClientContext* context, const ::database::Data* request, ::database::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::database::Data, ::database::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, std::move(f));
}

void Database::Stub::async::Put(::grpc::ClientContext* context, const ::database::Data* request, ::database::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::database::Result>* Database::Stub::PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::database::Data& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::database::Result, ::database::Data, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Put_, context, request);
}

::grpc::ClientAsyncResponseReader< ::database::Result>* Database::Stub::AsyncPutRaw(::grpc::ClientContext* context, const ::database::Data& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Database::Stub::Get(::grpc::ClientContext* context, const ::database::Key& request, ::database::Data* response) {
  return ::grpc::internal::BlockingUnaryCall< ::database::Key, ::database::Data, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void Database::Stub::async::Get(::grpc::ClientContext* context, const ::database::Key* request, ::database::Data* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::database::Key, ::database::Data, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void Database::Stub::async::Get(::grpc::ClientContext* context, const ::database::Key* request, ::database::Data* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::database::Data>* Database::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::database::Key& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::database::Data, ::database::Key, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::database::Data>* Database::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::database::Key& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Database::Stub::Delete(::grpc::ClientContext* context, const ::database::Key& request, ::database::Result* response) {
  return ::grpc::internal::BlockingUnaryCall< ::database::Key, ::database::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void Database::Stub::async::Delete(::grpc::ClientContext* context, const ::database::Key* request, ::database::Result* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::database::Key, ::database::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void Database::Stub::async::Delete(::grpc::ClientContext* context, const ::database::Key* request, ::database::Result* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::database::Result>* Database::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::database::Key& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::database::Result, ::database::Key, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::database::Result>* Database::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::database::Key& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

Database::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Database_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Database::Service, ::database::Data, ::database::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Database::Service* service,
             ::grpc::ServerContext* ctx,
             const ::database::Data* req,
             ::database::Result* resp) {
               return service->Put(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Database_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Database::Service, ::database::Key, ::database::Data, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Database::Service* service,
             ::grpc::ServerContext* ctx,
             const ::database::Key* req,
             ::database::Data* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Database_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Database::Service, ::database::Key, ::database::Result, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Database::Service* service,
             ::grpc::ServerContext* ctx,
             const ::database::Key* req,
             ::database::Result* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
}

Database::Service::~Service() {
}

::grpc::Status Database::Service::Put(::grpc::ServerContext* context, const ::database::Data* request, ::database::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Database::Service::Get(::grpc::ServerContext* context, const ::database::Key* request, ::database::Data* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Database::Service::Delete(::grpc::ServerContext* context, const ::database::Key* request, ::database::Result* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace database

